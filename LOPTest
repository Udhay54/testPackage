package com.amazon.aeeqa.ui.tests.ais;

import com.amazon.aeeqa.locale.cart.CartPageLocale;
import com.amazon.aeeqa.testnglisteners.MethodSelector;

import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import com.amazon.aeeqa.ui.AISBaseUITest;
import com.amazon.aeeqa.ui.common.Languages;
import com.amazon.aeeqa.ui.dataprovider.AISDataProvider;
import com.amazon.aeeqa.ui.dataprovider.dataobject.TestDTO;
import com.amazon.aeeqa.ui.groups.FeatureGroups;
import com.amazon.aeeqa.ui.groups.PriorityGroups;
import com.amazon.aeeqa.ui.helper.AISModeHelper;
import com.amazon.aeeqa.ui.helper.CartHelper;
import com.amazon.aeeqa.ui.helper.DetailPageHelper;
import com.amazon.aeeqa.ui.helper.LanguageHelper;
import com.amazon.aeeqa.ui.helper.LocationHelper;
import com.amazon.aeeqa.ui.pagemodels.cart.CartPage;
import com.amazon.aeeqa.ui.pagemodels.detail.DetailPage;
import com.amazon.aeeqa.ui.pagemodels.home.HomePage;
import com.amazon.dtk.localization.Marketplace;

import static com.amazon.aeeqa.ui.common.Languages.getCountOfLanguagesPerMP;

/**
 * Language of preference test cases.
 *
 * @author tingyong
 */
public class LOPTest extends AISBaseUITest {

    @BeforeMethod(alwaysRun = true)
    public void changeLocationToEnterAISMode() {
        runWithRetry("LOPTest#changeLocationToEnterAISMode", () -> {
            LocationHelper.changeLocation(driver, exportableCountry.getCountryDisplayName());
            driver.navigate().refresh();
            final HomePage aisGatewayPage = new HomePage(driver);
            aisGatewayPage.clickAmazonLogo();
            return true;
        }, Throwable.class);
    }

    //TODO: Enable other AIS MPs if LoP is launched in new AIS MPs
    @MethodSelector(exclude = {"AU", "SG"})
    @Test(description = "C65150, "
            + "Verify AIS user should see total of 8 languages in LOP picker in top nav",
            groups = {PriorityGroups.P0, FeatureGroups.AIS, FeatureGroups.LOP, FeatureGroups.RUN_PIPELINE, FeatureGroups.RUN_I18N_PARTNER_PIPELINE})
    public void testLanguagesAvailableInsideCOPLOPPicker() throws Exception {
        final HomePage aisGatewayPage = new HomePage(driver);
        Assert.assertTrue(aisGatewayPage.getLanguageOptionsCountInsideCOPLOPPicker() >= getCountOfLanguagesPerMP(),
                "Available languages should be displayed by cop/lop picker hovering.");
    }

    //TODO: Enable other AIS MPs if LoP is launched in new AIS MPs
    @MethodSelector(exclude = {"AU", "SG"})
    @Test(description = "C65151, "
            + "Verify AIS user should be able to click on radio button to change the language",
            enabled = true ,groups = {PriorityGroups.P0, FeatureGroups.AIS, FeatureGroups.LOP, FeatureGroups.RUN_I18N_PARTNER_PIPELINE})
    public void testClickingLanguageWidgetWillShowLanguageSettingsPopover() throws Exception {
        final HomePage aisGatewayPage = new HomePage(driver);
        aisGatewayPage.clickcurrencyAndLanguagePicker();
    }

    //There is no bottom language widget in new AIS MPs by design
    @MethodSelector(exclude = {"JP", "AE", "AU", "SG"})
    @Test(description = "C80126, "
            + "Verify AIS user should see total of 8 languages in LOP picker in bottom nav",
            groups = {PriorityGroups.P0, FeatureGroups.AIS, FeatureGroups.LOP})
    public void testLanguagesAvailableInBottomLanguageWidget() throws Exception {
        final HomePage aisGatewayPage = new HomePage(driver);
        Assert.assertTrue(aisGatewayPage.getBottomLanguageWidgetLanguageOptionsCount() >= getCountOfLanguagesPerMP(),
                "Available languages should be displayed by bottom language widget hovering.");
    }

    //There is no bottom language widget in new AIS MPs by design
    @MethodSelector(exclude = {"JP", "AE", "AU", "SG"})
    @Test(description = "C80134, "
            + "Verify AIS user should see total of 8 languages in LOP picker in bottom nav popover",
            groups = {PriorityGroups.P1, FeatureGroups.AIS, FeatureGroups.LOP})
    public void testLanguagesAvailableInBottomLanguageWidgetPopover() throws Exception {
        final HomePage aisGatewayPage = new HomePage(driver);
        Assert.assertTrue(aisGatewayPage.getBottomLanguageWidgetLanguageOptionsCountInsidePopover() >= getCountOfLanguagesPerMP(),
                "Available languages should be displayed inside the popover.");
    }

    //TODO: Enable other AIS MPs if LoP is launched in new AIS MPs. Need to rework JP and AE
    @MethodSelector(exclude = {"JP", "AE", "AU", "SG"})
    @Test(description = "C65183, "
            + "Verify AIS user should be able to successfully change the language by going through LOP picker and Validate LOP widget language radio button is highlited for previously selected language",
            groups = {PriorityGroups.P0, FeatureGroups.AIS, FeatureGroups.LOP, FeatureGroups.RUN_I18N_PARTNER_PIPELINE})
    public void testLanguageSwitching() throws Exception {
        final String spanishLanguage = "español";
        final String spanishSaveButtonText = "Guardar";
        final HomePage homePage = new HomePage(driver);
        homePage.switchToNonEnglishLanguage(spanishLanguage, spanishSaveButtonText);
        Assert.assertTrue(homePage.isTodaysDealsSpanishTextPresent(),"The language transition did not happen to Spanish language");
        Assert.assertTrue(homePage.isSpanishLanguageSelected(spanishLanguage),"The previously selected language's radio button is not highlighted.");
    }

    // Hovering on LanguageWidget isn't working and 'Change language' string only shows up on the popup on hovering,
    // disabling this test until the hover over is sorted out
    @Test(description = "C65167, "
            + "Verify Change language string is present inside the widget",
            enabled = false, groups = {PriorityGroups.P1, FeatureGroups.AIS, FeatureGroups.LOP})
    public void testChangeLanguageStringInLanguageWidget() throws Exception {
        final HomePage homePage = new HomePage(driver);
        Assert.assertTrue(homePage.isChangeLanguagePresent(),"Change Language string is not visible");
    }

    //TODO This test case should be considered in the future to modify the implementation to avoid hardcoded values. [D92530623]
    @Test(description = "C232350, "
            + "Verify Shopping Cart Heading string in chosen LOP",
            groups = {PriorityGroups.P1, FeatureGroups.AIS, FeatureGroups.LOP},
            dataProvider = AISDataProvider.AIS_ACCOUNT_AND_ASIN,
            dataProviderClass = AISDataProvider.class)
    public void testShoppingCartHeadingText(final TestDTO testDTO)  {
        final CartPage cartPage = new CartPage(driver);
        workflowToCartPage(testDTO, driver, exportableCountry.getCountryDisplayName());
        String[] language = new String[]{"en", "de", "ar"};
        String[] languageCountryCode = new String[]{"US", "DE", "AE"};
        String[] languageText = new String[]{"English", "Deutsch", "الترجمة"};
        String[] languageSaveButtonText = new String[]{"Save", "Änderungen", "التغييرات"};
        SoftAssert softAssert = new SoftAssert();
        final HomePage homePage = new HomePage(driver);
        int i=0;
        //Using do while as we want to run the test once for EN and then for an LTR and RTL
        try {
            do{
                homePage.switchToNonEnglishLanguage(languageText[i], languageSaveButtonText[i]);
                CartHelper.goToCartPage(driver, url);
                final String shoppingCartHeadingLocalizedText = CartPageLocale.RCX_SC_SHOPPING_CART.getI18NContentForCustomLocale(languageCountryCode[i], language[i]);
                softAssert.assertTrue(cartPage.getShoppingCartHeadingText().contains(shoppingCartHeadingLocalizedText), "Shopping Cart Heading string displayed in cart page is not reflected in chosen LOP");
                i++;
            } while(i < language.length);
        softAssert.assertAll();
        } finally {
            homePage.switchToNonEnglishLanguage(languageText[0], languageSaveButtonText[0]);
        }
    }

    /**
     * Method to Add ASIN from Cart Internal Tool Interface and lands on Cart page.
     */
    private void workflowToCartPage(final TestDTO testDTO, final WebDriver driver, String countryName) {
        LocationHelper.signInAndChangeLocation(driver, testDTO, countryName, url);
        driver.navigate().refresh();
        //Adding this check to verify if AIS mode has been entered
        AISModeHelper.verifyAISModeAndSelectedLocationIsUpdated(driver, exportableCountry.getCountryDisplayName());
        DetailPageHelper.goToDetailPage(driver, testDTO.getTestASIN(), url);
        final DetailPage detailPage = new DetailPage(driver);
        String offerListingValue = detailPage.getOfferListingValue();
        CartHelper.addItemsToCart(driver, testDTO.getTestASIN().getAsin(), offerListingValue);
        CartHelper.goToCartPage(driver,url);
        driver.navigate().refresh();
    }
}
