package com.amazon.aeeqa.ui.tests.ais;

import com.amazon.aeeqa.locale.search.SearchResultsPageLocale;
import com.amazon.aeeqa.testnglisteners.MethodSelector;
import com.amazon.aeeqa.ui.AISBaseUITest;
import com.amazon.aeeqa.ui.common.AISJumpinArcThreshold;
import com.amazon.aeeqa.ui.common.Country;
import com.amazon.aeeqa.ui.common.WeblabConstants;
import com.amazon.aeeqa.ui.dataprovider.dataobject.TestDTO;
import com.amazon.aeeqa.ui.groups.FeatureGroups;
import com.amazon.aeeqa.ui.groups.PriorityGroups;
import com.amazon.aeeqa.ui.helper.AISModeHelper;
import com.amazon.aeeqa.ui.helper.BrowserDriverHelper;
import com.amazon.aeeqa.ui.helper.CurrencySelectionHelper;
import com.amazon.aeeqa.ui.helper.LocationHelper;
import com.amazon.aeeqa.ui.pagemodels.home.HomePage;
import com.amazon.aeeqa.ui.pagemodels.search.SearchResultsPage;
import lombok.extern.slf4j.Slf4j;
import org.testng.Assert;
import org.testng.annotations.*;
import org.testng.asserts.SoftAssert;

import java.util.HashMap;
import java.util.Map;

@Slf4j
/**
 * Test cases to verify Search page Jumpin features in Amazon International Shopping mode.
 *
 * @author pavethr
 */

public class SearchPageJumpinTest extends AISBaseUITest {

    private static final String GROUP_JUMPIN_BELOW_THRESHOLD = "SearchResultsPageJumpin-BelowThreshold";
    private static final String GROUP_JUMPIN_ABOVE_THRESHOLD = "SearchResultsPageJumpin-AboveThreshold";
    private static final String countryEligibilityCheckKeyword = "toys";
    Country initialExportableCountry = null;

    @BeforeClass(alwaysRun = true)
    public void setupJumpinValuesAndInitializeExportableCountryToJumpin() {
        AIS_FREE_SHIPPING_THRESHOLD_PRICE_BY_ARC = AISJumpinArcThreshold.valueOf(String.format("%s_%s", sourceCountryCode, freeShippingExportableCountry.toString())).getAISJumpinArcThresholdValue();
        /**Overriding exportableCountry to Jumpin country as testDTORequest in individual tests is designed with exportableCountry variable input declared in AIS BaseUITest
         Storing the original exportable country in a new variable to reinitalize back after the tests**/
        initialExportableCountry = exportableCountry;
        exportableCountry = freeShippingExportableCountry;
    }

    @AfterClass(alwaysRun = true)
    public void reInitializeExportableCountry() {
        //Other classes' tests may fail if exportableCountry is overriden to freeShippingExportableCountry. Hence, switching back to the original export country chosen in AISBaseUI
        exportableCountry = initialExportableCountry;
    }

    //TODO: Enable once search refinement filter is launched in new Jumpin arcs
    @MethodSelector(exclude = {"JP", "AE", "AU", "SG"})
    @Test(description = "C232463, "
            + "[Desktop]:Verify for AIS customer, chooses Jumpin eligible destination on GLOW, customer should see a search refinement tag “Eligible for Free Shipping” -Searching a Keyword",
            groups = {PriorityGroups.P0, FeatureGroups.AIS, FeatureGroups.SEARCH, FeatureGroups.JUMPIN})
    public void testJumpinSearchRefinementFilterBySearchingKeyword() throws Exception {
        if (exportableCountry == Country.PS)
            exportableCountry = Country.IL;
        workflowToChangeLocation(exportableCountry.getCountryDisplayName());
        driver.navigate().refresh();
        final HomePage homePage = new HomePage(driver);
        homePage.search(countryEligibilityCheckKeyword);
        SearchResultsPage searchResults = new SearchResultsPage(driver);
        searchResults.verifySearchRefinementsByIdPresent(SearchResultsPage.SEARCH_REFINEMENT_JUMPIN_FREE_SHIPPING_ID);
        searchResults.clickSearchRefinementByRefinementID(SearchResultsPage.SEARCH_REFINEMENT_JUMPIN_FREE_SHIPPING_ID);
        final String observedFreeDeliveryMessageInSearchResults = searchResults.getShippingBenefitMessage(SearchResultsPageLocale.CORECX_DELIVERY_PRICE_FREE.getI18NContent() + " " + SearchResultsPageLocale.CORECX_DELIVERY_TYPE_DELIVERY.getI18NContent()).trim();
        SoftAssert softAssert = new SoftAssert();
        final String expectedThresholdPriceWithCurrencySymbol = currencySymbol + AIS_FREE_SHIPPING_THRESHOLD_PRICE_BY_ARC.intValue();
        final Map<String, String> itemAndThresholdValues = new HashMap<>();
        itemAndThresholdValues.put("${destination}", exportableCountry.getCountryDisplayName());
        itemAndThresholdValues.put("${threshold}", expectedThresholdPriceWithCurrencySymbol);
        final String expectedFreeDeliveryTextInSearch = SearchResultsPageLocale.CORECX_DELIVERY_PRICE_FREE.getI18NContent() + " " + SearchResultsPageLocale.CORECX_DELIVERY_TYPE_DELIVERY.getI18NContent();
        final String deliveryConditionTextInSearch = SearchResultsPageLocale.CORECX_BUP_FREE_DELIVERY_EXPORTS_DESTINATION_THRESHOLD.getMultiVariableI18NContent(itemAndThresholdValues);
        final String observedJumpinIneligibleMessageInSearchResults = searchResults.getShippingBenefitMessage(SearchResultsPageLocale.CORECX_DELIVERY_TYPE_CAPITAL_DELIVERY.getI18NContent()).trim();
        final String expectedDestinationNameInFSMessage = SearchResultsPageLocale.JUMPIN_MSG_FREE_IFD_THRESHOLD_OVER_FREE_SHIPPING_THRESHOLD_SX.getI18NContentWithCustomText(exportableCountry.getCountryDisplayName());
        final String[] expectedDeliveryConditionInSearch = deliveryConditionTextInSearch.split(SearchResultsPageLocale.CORECX_DELIVERY_TYPE_DELIVERY.getI18NContent());
        //Checking both below threshold and above threshold Jumpin messages
        softAssert.assertTrue(observedFreeDeliveryMessageInSearchResults.contains(expectedFreeDeliveryTextInSearch), "Eligible for Free Shipping Message was not shown correctly for Jumpin asins in search results page");
        searchResults.clickSearchRefinementFilterClearButton();
        //TODO: Modify logic to check both Below and Above threshold messages after filter disabled https://issues.amazon.com/issues/D110147897
        if (observedFreeDeliveryMessageInSearchResults.contains(expectedFreeDeliveryTextInSearch)) {
            softAssert.assertTrue(observedFreeDeliveryMessageInSearchResults.contains(expectedDestinationNameInFSMessage),"Destination name in FS Message not shown correctly in search results page after the filter cleared");
        } else {
            softAssert.assertTrue(observedJumpinIneligibleMessageInSearchResults.contains(expectedDestinationNameInFSMessage)
                    , String.format("The country name [%s] in ineligible text is not shown correctly in observed Message in Search Results page: [%s].", expectedDestinationNameInFSMessage, observedJumpinIneligibleMessageInSearchResults));
        }
        softAssert.assertAll();
    }

    //TODO: Enable once search refinement filter is launched in new Jumpin arcs
    @MethodSelector(exclude = {"JP", "AE", "AU", "SG"})
    @Test(description = "C232465, "
            + "Verify Serach Refinement Filter when we switch from Jumpin Destination to Non Jumpin",
            groups = {PriorityGroups.P1, FeatureGroups.AIS, FeatureGroups.SEARCH, FeatureGroups.JUMPIN})
    public void testJumpinSearchRefinementFilterSwitchBetweenJumpinAndNonJumpin() throws Exception {
        if (exportableCountry == Country.PS)
            exportableCountry = Country.IL;
        workflowToChangeLocation(exportableCountry.getCountryDisplayName());
        driver.navigate().refresh();
        final HomePage homePage = new HomePage(driver);
        homePage.search(countryEligibilityCheckKeyword);
        SearchResultsPage searchResults = new SearchResultsPage(driver);
        searchResults.verifySearchRefinementsByIdPresent(SearchResultsPage.SEARCH_REFINEMENT_JUMPIN_FREE_SHIPPING_ID);
        searchResults.clickSearchRefinementByRefinementID(SearchResultsPage.SEARCH_REFINEMENT_JUMPIN_FREE_SHIPPING_ID);
        searchResults.clickSearchRefinementFilterClearButton();
        driver.navigate().refresh();
        //Switching between Jumpin to Non-Jumpin
        workflowToChangeLocation(initialExportableCountry.getCountryDisplayName());
        driver.navigate().refresh();
        searchResults.verifySearchRefinementsByIdNotPresent(SearchResultsPage.SEARCH_REFINEMENT_JUMPIN_FREE_SHIPPING_ID);
    }

    //TODO: Enable once search refinement filter is launched in new Jumpin arcs
    @MethodSelector(exclude = {"JP", "AE", "AU", "SG"})
    @Test(description = "C232464, "
            + "Verify Search Refinement Filter when we switch from Jumpin Destination to Domestic",
            groups = {PriorityGroups.P1, FeatureGroups.AIS, FeatureGroups.SEARCH, FeatureGroups.JUMPIN})
    public void testJumpinSearchRefinementFilterSwitchBetweenJumpinAndDomestic() throws Exception {
        if (exportableCountry == Country.PS)
            exportableCountry = Country.IL;
        workflowToChangeLocation(exportableCountry.getCountryDisplayName());
        driver.navigate().refresh();
        final HomePage homePage = new HomePage(driver);
        homePage.search(countryEligibilityCheckKeyword);
        SearchResultsPage searchResults = new SearchResultsPage(driver);
        searchResults.verifySearchRefinementsByIdPresent(SearchResultsPage.SEARCH_REFINEMENT_JUMPIN_FREE_SHIPPING_ID);
        searchResults.clickSearchRefinementByRefinementID(SearchResultsPage.SEARCH_REFINEMENT_JUMPIN_FREE_SHIPPING_ID);
        searchResults.clickSearchRefinementFilterClearButton();
        //Switching between Jumpin to Domestic
        LocationHelper.changeLocationBackToDefaultLocationIfNeeded(driver);
        driver.navigate().refresh();
        searchResults.verifySearchRefinementsByIdPresent(SearchResultsPage.SEARCH_REFINEMENT_DOMESTIC_US_FREE_SHIPPING_ID);
    }

    //TODO: Enable for JP once Jumpin is launched in JP
    @MethodSelector(exclude = "JP")
    @Test(description = "C240841, "
            + "Search-[Recognized/Unrecognized]: Shipping Destination is XX Jumpin Location:Verify in Search Results for item below threshold message \"FREE Shipping to XX destination when you spend over $XX on eligible items\"",
            groups = {PriorityGroups.P0, FeatureGroups.AIS, FeatureGroups.SEARCH, GROUP_JUMPIN_BELOW_THRESHOLD, FeatureGroups.JUMPIN})
    public void testJumpinFreeShippingMessageForBelowThresholdInSearchResultsPage() throws Exception {
        final HomePage homePage = new HomePage(driver);
        workflowToChangeLocation(exportableCountry.getCountryDisplayName());
        driver.navigate().refresh();
        testDTORequest = buildTestDTORequest(buildTestAsinRequest(
                getAisEligibleForFreeShippingAsin(AIS_FREE_SHIPPING_THRESHOLD_PRICE_BY_ARC)), null /* no account */);
        testDTO = generateTestDTO(testDTORequest);
        //Converting to String to search the asin in search box
        String asinValue = testDTO.getTestASIN().getAsin();
        homePage.search(asinValue);
        final SearchResultsPage searchResults = new SearchResultsPage(driver);
        final String observedFreeDeliveryMessageInSearchResults = searchResults.getShippingBenefitMessage(SearchResultsPageLocale.CORECX_DELIVERY_PRICE_FREE.getI18NContent() + " " + SearchResultsPageLocale.CORECX_DELIVERY_TYPE_DELIVERY.getI18NContent()).trim();
        final String expectedThresholdPriceWithCurrencySymbol = currencySymbol + AIS_FREE_SHIPPING_THRESHOLD_PRICE_BY_ARC.intValue();
        final Map<String, String> itemAndThresholdValues = new HashMap<>();
        itemAndThresholdValues.put("${destination}", exportableCountry.getCountryDisplayName());
        itemAndThresholdValues.put("${threshold}", expectedThresholdPriceWithCurrencySymbol);
        final String expectedFreeDeliveryTextInSearch = SearchResultsPageLocale.CORECX_DELIVERY_PRICE_FREE.getI18NContent() + " " + SearchResultsPageLocale.CORECX_DELIVERY_TYPE_DELIVERY.getI18NContent();
        final String deliveryConditionTextInSearch = SearchResultsPageLocale.CORECX_BUP_FREE_DELIVERY_EXPORTS_DESTINATION_THRESHOLD.getMultiVariableI18NContent(itemAndThresholdValues);
        final String[] expectedDeliveryConditionInSearch = deliveryConditionTextInSearch.split(SearchResultsPageLocale.CORECX_DELIVERY_TYPE_DELIVERY.getI18NContent());
        SoftAssert softAssert = new SoftAssert();
        log.info("Observed 'Eligible For FreeShipping Text' in Search: "  + observedFreeDeliveryMessageInSearchResults);
        //Validates FREE Delivery string in Search UDM Message.
        softAssert.assertTrue(observedFreeDeliveryMessageInSearchResults.contains(expectedFreeDeliveryTextInSearch),
                String.format("Expected FREE delivery string: [%s] was not shown correctly in observed search Message: [%s]", expectedFreeDeliveryTextInSearch, observedFreeDeliveryMessageInSearchResults));
        //Validates Destination and "eligible items" text in UDM Message as the expectedDeliveryConditionInSearch[1] holds : to {countryName} on $XX of eligible items.
        softAssert.assertTrue(observedFreeDeliveryMessageInSearchResults.contains(expectedDeliveryConditionInSearch[1]),
                String.format("Observed Free delivery condition message on Search: [%s] doesn't contain expected free delivery condition text: [%s]", observedFreeDeliveryMessageInSearchResults, expectedDeliveryConditionInSearch[1]));
        softAssert.assertAll();
    }

    @Test(description = "C240842, "
            + "Search-[Recognized/Unrecognized]:Verify threshold value should be COP aware in Free shipping message for items below threshold item-Shipping to Jumpin Destination",
            groups = {PriorityGroups.P0, FeatureGroups.AIS, FeatureGroups.SEARCH, GROUP_JUMPIN_BELOW_THRESHOLD, FeatureGroups.JUMPIN})
    //TODO: Enable for JP once Jumpin is launched in JP
    @MethodSelector(exclude = "JP")
    public void testJumpinFreeShippingMessageCOPAwareInSearchResultsPage() throws Exception {
        final HomePage homePage = new HomePage(driver);
        workflowToChangeLocation(exportableCountry.getCountryDisplayName());
        driver.navigate().refresh();
        testDTORequest = buildTestDTORequest(buildTestAsinRequest(
                getAisEligibleForFreeShippingAsin(AIS_FREE_SHIPPING_THRESHOLD_PRICE_BY_ARC)), null /* no account */);
        testDTO = generateTestDTO(testDTORequest);
        CurrencySelectionHelper.navigateToCurrencySettingsPage(driver);
        String selectedCurrency = CurrencySelectionHelper.selectRandomCurrencyToShopWith(driver);
        //Converting to String to search the asin in search box
        String asinValue = testDTO.getTestASIN().getAsin();
        driver.navigate().refresh();
        homePage.search(asinValue);
        final SearchResultsPage searchResults = new SearchResultsPage(driver);
        searchResults.verifyCurrentPage();
        final String observedFreeDeliveryMessageInSearchResults = searchResults.getShippingBenefitMessage(SearchResultsPageLocale.CORECX_DELIVERY_PRICE_FREE.getI18NContent() + " " + SearchResultsPageLocale.CORECX_DELIVERY_TYPE_DELIVERY.getI18NContent()).trim();
        final String expectedDeliveryConditionInUDM = SearchResultsPageLocale.CORECX_ELIGIBLE_ITEMS_EFS.getI18NContent();
        final String expectedDestinationNameInFSMessage = SearchResultsPageLocale.JUMPIN_MSG_FREE_IFD_THRESHOLD_OVER_FREE_SHIPPING_THRESHOLD_SX.getI18NContentWithCustomText(exportableCountry.getCountryDisplayName());
        //Reconstructing fetched FS message in COP as part of threshold value with selected COP is dynamic such as HKD value in USD 49.00 (HKD 391.54)
        final String reconstructedShippingMessageInSearchResultsWithCoP = currencySymbol + AIS_FREE_SHIPPING_THRESHOLD_PRICE_BY_ARC.intValue() +" ("+selectedCurrency;
        final String expectedFreeDeliveryTextInSearch = SearchResultsPageLocale.CORECX_DELIVERY_PRICE_FREE.getI18NContent() + " " + SearchResultsPageLocale.CORECX_DELIVERY_TYPE_DELIVERY.getI18NContent();
        log.info("Eligible For FreeShipping Text in Search Results: " + observedFreeDeliveryMessageInSearchResults);
        try {
            SoftAssert softAssert = new SoftAssert();
            softAssert.assertTrue(observedFreeDeliveryMessageInSearchResults.contains(expectedFreeDeliveryTextInSearch),
                    String.format("Expected FREE delivery string: [%s] was not shown correctly in observed search Message: [%s]", expectedFreeDeliveryTextInSearch, observedFreeDeliveryMessageInSearchResults));
            softAssert.assertTrue(observedFreeDeliveryMessageInSearchResults
                    .contains(reconstructedShippingMessageInSearchResultsWithCoP) && observedFreeDeliveryMessageInSearchResults
                    .contains(expectedDestinationNameInFSMessage) && observedFreeDeliveryMessageInSearchResults
                    .contains(expectedDeliveryConditionInUDM), String.format("Selected currency [%s] is not displaying for below threshold item in search results page", selectedCurrency));
            softAssert.assertAll();
        } finally {
            //Resetting the currency back to USD for other test using this account.
            BrowserDriverHelper.goToUrl(driver, url);
            CurrencySelectionHelper.navigateToCurrencySettingsPage(driver);
            CurrencySelectionHelper.selectCurrencyByNameToShopWith(driver, "Default");
        }
    }

    //TODO: Enable for JP once Jumpin is launched in JP
    @MethodSelector(exclude = "JP")
    @Test(description = "C240843, "
            + "Search-[Recognized/Unrecognized]:Jumpin Shipping Destination:Verify in Search Results for item above threshold message \"Free Shipping to Country X\" below item price",
            groups = {PriorityGroups.P0, FeatureGroups.AIS, FeatureGroups.SEARCH, GROUP_JUMPIN_ABOVE_THRESHOLD, FeatureGroups.JUMPIN})
    public void testJumpinFreeShippingMessageAboveThresholdInSearchResultsPage() throws Exception {
        final HomePage homePage = new HomePage(driver);
        workflowToChangeLocation(exportableCountry.getCountryDisplayName());
        driver.navigate().refresh();
        productGroupType = "gl_pc";
        testDTORequest = buildTestDTORequest(buildTestAsinRequest(
                getJumpinHardCodeASIN("aisFreeShipping")), null /* no account */);
        //TODO: Once shift service resolves above threshold issue - https://issues.amazon.com/issues/PrimeTools-4347, uncomment the following and remove above implementation for getJumpinHardCodeASIN
        /*testDTORequest = buildTestDTORequest(buildTestAsinRequest(
            getAisFreeShippingAsin(AIS_FREE_SHIPPING_THRESHOLD_PRICE_BY_ARC)), null /* no account *//*);*/
        testDTO = generateTestDTO(testDTORequest);
        String asinValue = testDTO.getTestASIN().getAsin();
        homePage.search(asinValue);
        final SearchResultsPage searchResults = new SearchResultsPage(driver);
        final String observedFreeShippingMessageInSearchResults = searchResults.getShippingBenefitMessage(SearchResultsPageLocale.CORECX_DELIVERY_PRICE_FREE.getI18NContent() + " " + SearchResultsPageLocale.CORECX_DELIVERY_TYPE_DELIVERY.getI18NContent()).trim();
        final String expectedFreeDeliveryTextInUDMSearchResults = SearchResultsPageLocale.CORECX_DELIVERY_PRICE_FREE.getI18NContent() + " " + SearchResultsPageLocale.CORECX_DELIVERY_TYPE_DELIVERY.getI18NContent();
        final String expectedDestinationNameInFSMessage = SearchResultsPageLocale.JUMPIN_MSG_FREE_IFD_THRESHOLD_OVER_FREE_SHIPPING_THRESHOLD_SX.getI18NContentWithCustomText(exportableCountry.getCountryDisplayName());
        SoftAssert softAssert = new SoftAssert();
        //Validates FREE Delivery string in UDM Search Message.
        softAssert.assertTrue(observedFreeShippingMessageInSearchResults.contains(expectedFreeDeliveryTextInUDMSearchResults),
                String.format("Expected FREE delivery string: [%s] was not shown correctly in observed UDM Message in Search: [%s]", expectedFreeDeliveryTextInUDMSearchResults, observedFreeShippingMessageInSearchResults));
        softAssert.assertTrue(observedFreeShippingMessageInSearchResults.contains(expectedDestinationNameInFSMessage),
                String.format("Expected FS destination name: [%s] was not shown correctly in observed FS Message in Search: [%s]", expectedDestinationNameInFSMessage, observedFreeShippingMessageInSearchResults));
        softAssert.assertAll();
    }

    @Test(description = "C240840, "
            + "Search-Verify for For items that are ineligible for Free Shipping, customers should see standard AIS messaging, “Shipping to XX country\".",
            groups = {PriorityGroups.P0, FeatureGroups.AIS, FeatureGroups.SEARCH, GROUP_JUMPIN_BELOW_THRESHOLD, FeatureGroups.JUMPIN})
    public void testStandardShippingMessageForJumpinIneligible() throws Exception {
        final HomePage homePage = new HomePage(driver);
        workflowToChangeLocation(exportableCountry.getCountryDisplayName());
        driver.navigate().refresh();
        testDTORequest = buildTestDTORequest(buildTestAsinRequest(getBasicIneligibleForAisFreeShippingAsin()), null /* no account */);
        testDTO = generateTestDTO(testDTORequest);
        String asinValue = testDTO.getTestASIN().getAsin();
        homePage.search(asinValue);
        final SearchResultsPage searchResults = new SearchResultsPage(driver);
        //TODO: Modify the correct string ID for "Delivery to" text in jumpin ineligible message. https://issues.amazon.com/issues/D109607240
        // This is insufficient validation as currently the below line is checking only "Delivery" and "destination name" texts.
        final String observedJumpinIneligibleMessageInSearchResults = searchResults.getShippingBenefitMessage(SearchResultsPageLocale.CORECX_DELIVERY_TYPE_CAPITAL_DELIVERY.getI18NContent()).trim();
        final String expectedDestinationNameInFSMessage = SearchResultsPageLocale.JUMPIN_MSG_FREE_IFD_THRESHOLD_OVER_FREE_SHIPPING_THRESHOLD_SX.getI18NContentWithCustomText(exportableCountry.getCountryDisplayName());
        Assert.assertTrue(observedJumpinIneligibleMessageInSearchResults.contains(expectedDestinationNameInFSMessage)
                , String.format("The country name [%s] in ineligible text is not shown correctly in observed Message in Search Results page: [%s].", expectedDestinationNameInFSMessage, observedJumpinIneligibleMessageInSearchResults));
    }

    private void workflowToChangeLocation (String countryName) {
        runWithRetry("SearchPageJumpinTest#changeLocationToEnterAISMode", () -> {
            LocationHelper.changeLocation(driver, countryName);
            driver.navigate().refresh();
            //Adding this check to verify if AIS mode has been entered
            AISModeHelper.verifyAISModeAndSelectedLocationIsUpdated(driver, countryName);
            return true;
        }, Throwable.class);
    }

}
